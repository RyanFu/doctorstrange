{
    "version": 3,
    "sources": [
        "../../../src/home/model/user.js"
    ],
    "names": [
        "init",
        "args",
        "tableName",
        "getEncryptPassword",
        "password",
        "passwordHash",
        "hash",
        "hashPassword",
        "checkPassword",
        "userInfo",
        "login",
        "usertext",
        "ip",
        "where",
        "user_name",
        "email",
        "phone",
        "_logic",
        "find",
        "user",
        "think",
        "isEmpty",
        "status",
        "addUser",
        "data",
        "encryptPassword",
        "type",
        "userName",
        "thenAdd",
        "create_ip",
        "update_ip",
        "updateUser",
        "id",
        "info",
        "reject",
        "Error",
        "updateData",
        "forEach",
        "val",
        "name",
        "last_login_time",
        "Date",
        "now",
        "last_login_ip",
        "update",
        "model",
        "base"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;mBAGEA,I,mBAAe;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACb,yDAAMD,IAAN,kDAAcC,IAAd;AACA,SAAKC,SAAL,GAAiB,MAAjB;AACD,G;;mBAGDC,kB,+BAAmBC,Q,EAAU;AAC3B,QAAIC,eAAe,0BAAnB;AACA,QAAIC,OAAOD,aAAaE,YAAb,CAA0BH,QAA1B,CAAX;;AAEA,WAAOE,IAAP;AACD,G;;mBAGDE,a,0BAAcC,Q,EAAUL,Q,EAAU;AAChC,QAAIC,eAAe,0BAAnB;;AAEA,WAAOA,aAAaG,aAAb,CAA2BJ,QAA3B,EAAqCK,SAASL,QAA9C,CAAP;AACD,G;;AAGD;;;;;;;;;;;mBASMM,K;2FAAMC,Q,EAAUP,Q,EAAUQ,E;;;;;;;qBAEb,KAAKC,KAAL,CAAW;AAC1BC,2BAAWH,QADe;AAE1BI,uBAAOJ,QAFmB;AAG1BK,uBAAOL,QAHmB;AAI1BM,wBAAQ;AAJkB,eAAX,EAKdC,IALc,E;;;AAAbC,kB;;mBAOAC,MAAMC,OAAN,CAAcF,IAAd,C;;;;;+CACK,gB;;;oBAGLA,KAAKG,MAAL,GAAc,C;;;;;+CACT,W;;;kBAOJ,KAAKd,aAAL,CAAmBW,IAAnB,EAAyBf,QAAzB,C;;;;;+CACI,gB;;;+CAGFe,I;;;;;;;;;;;;;;;;;mBAITI,O,oBAAQC,I,EAAMZ,E,EAAI;AAChB,QAAIa,kBAAkB,KAAKtB,kBAAL,CAAwBqB,KAAKpB,QAA7B,CAAtB;;AAEA,QAAIsB,OAAOF,KAAKE,IAAL,IAAa,CAAxB;;AAEA,WAAO,KAAKb,KAAL,CAAW;AAChBC,iBAAWU,KAAKG,QADA,EACUZ,OAAOS,KAAKT,KADtB,EAC6BE,QAAQ;AADrC,KAAX,EAEJW,OAFI,CAEI;AACTd,iBAAWU,KAAKG,QADP;AAETZ,aAAOS,KAAKT,KAFH;AAGTC,aAAOQ,KAAKR,KAHH;AAITZ,gBAAUqB,eAJD;AAKTI,iBAAWjB,EALF;AAMTkB,iBAAWlB;AANF,KAFJ,CAAP;AAUD,G;;mBAEKmB,U;6FAAWP,I,EAAMZ,E;;;;;;;qBACJ,KAAKC,KAAL,CAAW;AAC1BmB,oBAAIR,KAAKQ;AADiB,eAAX,EAEdd,IAFc,E;;;AAAbe,kB;;mBAIAb,MAAMC,OAAN,CAAcY,IAAd,C;;;;;gDACK,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gBAAV,CAAf,C;;;AAGL/B,sB,GAAWoB,KAAKpB,Q;;AACpB,kBAAIA,QAAJ,EAAc;AACZA,2BAAW,KAAKD,kBAAL,CAAwBC,QAAxB,CAAX;AACD;;AAEGgC,wB,GAAa,E;;;AAEjB,eAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,MAA7B,EAAqCC,OAArC,CAA6C,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1D,oBAAIf,KAAKe,IAAL,CAAJ,EAAgB;AACdH,6BAAWG,IAAX,IAAmBD,GAAnB;AACD;AACF,eAJD;;mBAMIlB,MAAMC,OAAN,CAAce,UAAd,C;;;;;gDACK,kBAAQF,MAAR,CAAe,YAAf,C;;;;AAGTE,yBAAWI,eAAX,GAA6BC,KAAKC,GAAL,EAA7B;AACAN,yBAAWO,aAAX,GAA2B/B,EAA3B;;gDAEO,KAAKC,KAAL,CAAW;AAChBmB,oBAAIR,KAAKQ;AADO,eAAX,EAEJY,MAFI,CAEGR,UAFH,C;;;;;;;;;;;;;;;;;;EA1GkBhB,MAAMyB,KAAN,CAAYC,I",
    "file": "../../../src/home/model/user.js",
    "sourcesContent": [
        "'use strict'\n\nimport {PasswordHash} from 'phpass';\n\nexport default class extends think.model.base {\n  init (...args) {\n    super.init(...args);\n    this.tableName = \"user\"\n  }\n\n\n  getEncryptPassword(password) {\n    let passwordHash = new PasswordHash();\n    let hash = passwordHash.hashPassword(password);\n\n    return hash;\n  }\n\n\n  checkPassword(userInfo, password) {\n    let passwordHash = new PasswordHash();\n\n    return passwordHash.checkPassword(password, userInfo.password);\n  }\n\n\n  /**\n   * 用户登录\n   * @method login\n   * @param  {[type]} usertext [description]\n   * @param  {[type]} password [description]\n   * @param  {[type]} ip       [description]\n   * @return {[type]}          [description]\n   * @author jimmy\n   */\n  async login(usertext, password, ip) {\n\n    let user = await this.where({\n      user_name: usertext,\n      email: usertext,\n      phone: usertext,\n      _logic: 'OR'\n    }).find();\n\n    if (think.isEmpty(user)) {\n      return 'USER_NOT_EXIST';\n    }\n\n    if (user.status > 0) {\n      return 'USER_DENY';\n    }\n\n    // if (user.type < type) {\n    //   return 'USER_NO_PERMISSION';\n    // }\n\n    if (!this.checkPassword(user, password)) {\n      return 'PASSWORD_ERROR';\n    }\n\n    return user;\n  }\n\n\n  addUser(data, ip) {\n    let encryptPassword = this.getEncryptPassword(data.password);\n\n    let type = data.type || 0;\n\n    return this.where({\n      user_name: data.userName, email: data.email, _logic: 'OR'\n    }).thenAdd({\n      user_name: data.userName,\n      email: data.email,\n      phone: data.phone,\n      password: encryptPassword,\n      create_ip: ip,\n      update_ip: ip,\n    });\n  }\n\n  async updateUser(data, ip) {\n    let info = await this.where({\n      id: data.id\n    }).find();\n\n    if (think.isEmpty(info)) {\n      return Promise.reject(new Error('USER_NOT_EXIST'));\n    }\n\n    let password = data.password;\n    if (password) {\n      password = this.getEncryptPassword(password)\n    }\n\n    let updateData = {};\n\n    ['avatar', 'phone', 'level', 'type'].forEach((val, name) => {\n      if (data[name]) {\n        updateData[name] = val;\n      }\n    });\n\n    if (think.isEmpty(updateData)) {\n      return Promise.reject('DATA_EMPTY');\n    }\n\n    updateData.last_login_time = Date.now();\n    updateData.last_login_ip = ip;\n\n    return this.where({\n      id: data.id\n    }).update(updateData);\n  }\n}\n"
    ]
}