{
    "version": 3,
    "sources": [
        "../../../src/home/model/user.js"
    ],
    "names": [],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;mBAGE,I,mBAAe;AAAA;;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACb,yDAAM,IAAN,kDAAc,IAAd;AACA,SAAK,SAAL,GAAiB,MAAjB;AACD,G;;mBAGD,kB,+BAAmB,Q,EAAU;AAC3B,QAAI,eAAe,0BAAnB;AACA,QAAI,OAAO,aAAa,YAAb,CAA0B,QAA1B,CAAX;;AAEA,WAAO,IAAP;AACD,G;;mBAGD,a,0BAAc,Q,EAAU,Q,EAAU;AAChC,QAAI,eAAe,0BAAnB;;AAEA,WAAO,aAAa,aAAb,CAA2B,QAA3B,EAAqC,SAAS,QAA9C,CAAP;AACD,G;;AAGD;;;;;;;;;;;mBASM,K;2FAAM,Q,EAAU,Q,EAAU,E;;;;;;;qBAEb,KAAK,KAAL,CAAW;AAC1B,2BAAW,QADe;AAE1B,uBAAO,QAFmB;AAG1B,uBAAO,QAHmB;AAI1B,wBAAQ;AAJkB,eAAX,EAKd,IALc,E;;;AAAb,kB;;mBAOA,MAAM,OAAN,CAAc,IAAd,C;;;;;+CACK,gB;;;oBAGL,KAAK,MAAL,GAAc,C;;;;;+CACT,W;;;kBAOJ,KAAK,aAAL,CAAmB,IAAnB,EAAyB,QAAzB,C;;;;;+CACI,gB;;;+CAGF,I;;;;;;;;;;;;;;;;;mBAIT,O,oBAAQ,I,EAAM,E,EAAI;AAChB,QAAI,kBAAkB,KAAK,kBAAL,CAAwB,KAAK,QAA7B,CAAtB;;AAEA,QAAI,OAAO,KAAK,IAAL,IAAa,CAAxB;;AAEA,WAAO,KAAK,KAAL,CAAW;AAChB,iBAAW,KAAK,QADA,EACU,OAAO,KAAK,KADtB,EAC6B,QAAQ;AADrC,KAAX,EAEJ,OAFI,CAEI;AACT,iBAAW,KAAK,QADP;AAET,aAAO,KAAK,KAFH;AAGT,aAAO,KAAK,KAHH;AAIT,gBAAU,eAJD;AAKT,iBAAW,EALF;AAMT,iBAAW;AANF,KAFJ,CAAP;AAUD,G;;mBAEK,U;6FAAW,I,EAAM,E;;;;;;;qBACJ,KAAK,KAAL,CAAW;AAC1B,oBAAI,KAAK;AADiB,eAAX,EAEd,IAFc,E;;;AAAb,kB;;mBAIA,MAAM,OAAN,CAAc,IAAd,C;;;;;gDACK,kBAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,gBAAV,CAAf,C;;;AAGL,sB,GAAW,KAAK,Q;;AACpB,kBAAI,QAAJ,EAAc;AACZ,2BAAW,KAAK,kBAAL,CAAwB,QAAxB,CAAX;AACD;;AAEG,wB,GAAa,E;;;AAEjB,eAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,OAArC,CAA6C,UAAC,GAAD,EAAM,IAAN,EAAe;AAC1D,oBAAI,KAAK,IAAL,CAAJ,EAAgB;AACd,6BAAW,IAAX,IAAmB,GAAnB;AACD;AACF,eAJD;;mBAMI,MAAM,OAAN,CAAc,UAAd,C;;;;;gDACK,kBAAQ,MAAR,CAAe,YAAf,C;;;;AAGT,yBAAW,eAAX,GAA6B,KAAK,GAAL,EAA7B;AACA,yBAAW,aAAX,GAA2B,EAA3B;;gDAEO,KAAK,KAAL,CAAW;AAChB,oBAAI,KAAK;AADO,eAAX,EAEJ,MAFI,CAEG,UAFH,C;;;;;;;;;;;;;;;;;;EA1GkB,MAAM,KAAN,CAAY,I",
    "file": "../../../src/home/model/user.js",
    "sourcesContent": [
        "'use strict'\n\nimport {PasswordHash} from 'phpass';\n\nexport default class extends think.model.base {\n  init (...args) {\n    super.init(...args);\n    this.tableName = \"user\"\n  }\n\n\n  getEncryptPassword(password) {\n    let passwordHash = new PasswordHash();\n    let hash = passwordHash.hashPassword(password);\n\n    return hash;\n  }\n\n\n  checkPassword(userInfo, password) {\n    let passwordHash = new PasswordHash();\n\n    return passwordHash.checkPassword(password, userInfo.password);\n  }\n\n\n  /**\n   * 用户登录\n   * @method login\n   * @param  {[type]} usertext [description]\n   * @param  {[type]} password [description]\n   * @param  {[type]} ip       [description]\n   * @return {[type]}          [description]\n   * @author jimmy\n   */\n  async login(usertext, password, ip) {\n\n    let user = await this.where({\n      user_name: usertext,\n      email: usertext,\n      phone: usertext,\n      _logic: 'OR'\n    }).find();\n\n    if (think.isEmpty(user)) {\n      return 'USER_NOT_EXIST';\n    }\n\n    if (user.status > 0) {\n      return 'USER_DENY';\n    }\n\n    // if (user.type < type) {\n    //   return 'USER_NO_PERMISSION';\n    // }\n\n    if (!this.checkPassword(user, password)) {\n      return 'PASSWORD_ERROR';\n    }\n\n    return user;\n  }\n\n\n  addUser(data, ip) {\n    let encryptPassword = this.getEncryptPassword(data.password);\n\n    let type = data.type || 0;\n\n    return this.where({\n      user_name: data.userName, email: data.email, _logic: 'OR'\n    }).thenAdd({\n      user_name: data.userName,\n      email: data.email,\n      phone: data.phone,\n      password: encryptPassword,\n      create_ip: ip,\n      update_ip: ip,\n    });\n  }\n\n  async updateUser(data, ip) {\n    let info = await this.where({\n      id: data.id\n    }).find();\n\n    if (think.isEmpty(info)) {\n      return Promise.reject(new Error('USER_NOT_EXIST'));\n    }\n\n    let password = data.password;\n    if (password) {\n      password = this.getEncryptPassword(password)\n    }\n\n    let updateData = {};\n\n    ['avatar', 'phone', 'level', 'type'].forEach((val, name) => {\n      if (data[name]) {\n        updateData[name] = val;\n      }\n    });\n\n    if (think.isEmpty(updateData)) {\n      return Promise.reject('DATA_EMPTY');\n    }\n\n    updateData.last_login_time = Date.now();\n    updateData.last_login_ip = ip;\n\n    return this.where({\n      id: data.id\n    }).update(updateData);\n  }\n}\n"
    ]
}